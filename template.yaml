AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Email API for emails project

Transform:
  - AWS::Serverless-2016-10-31

Parameters:
  Environment:
    Type: String
    Default: prod
    AllowedValues:
      - prod
      - test
    Description: Environment for deploy
  QueueApiKey:
    Type: String
    Description: API key for emails-queue-api

Mappings:
  EnvironmentMap:
    prod:
      bucket: emails-service-storage
      certificateEdge: adce1a21-90b4-4120-8548-111215e582f0
      certificateRegional: adce1a21-90b4-4120-8548-111215e582f0
      corsDomain: https://email.dbowland.com
      domain: emails-email-api.dbowland.com
      domainEmail: dbowland.com
      domainInternal: emails-email-api-internal.dbowland.com
      logStreamFunction: log-subscriber
      queueApiUrl: https://emails-queue-api.dbowland.com/v1
      tableAccounts: emails-email-api-accounts
      tableReceived: emails-email-api-received
      tableSent: emails-email-api-sent
      userPool: us-east-1_Ye69GgTRe
      userPoolClient: 3cejj3ovkhdcc1g12pan5kef97
      zoneId: Z072422417XWM8PIXXSFA
    test:
      bucket: emails-service-storage-test
      certificateEdge: 6a48cba7-feb9-4de5-8cbf-d383140fcdef
      certificateRegional: 6a48cba7-feb9-4de5-8cbf-d383140fcdef
      corsDomain: https://email.bowland.link
      domain: emails-email-api.bowland.link
      domainEmail: bowland.link
      domainInternal: emails-email-api-internal.bowland.link
      logStreamFunction: log-subscriber-test
      queueApiUrl: https://emails-queue-api.bowland.link/v1
      tableAccounts: emails-email-api-accounts-test
      tableReceived: emails-email-api-received-test
      tableSent: emails-email-api-sent-test
      userPool: us-east-1_F7D2gaAHZ
      userPoolClient: 1mu219nb4hc1jp5bgnq1bcpnsb
      zoneId: Z01312547RGU1BYKIJXY

Resources:
  # API Gateway

  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: v1
      Auth:
        ApiKeyRequired: true # sets for all methods
        UsagePlan:
          CreateUsagePlan: PER_API
          Description: Usage plan for emails-email-api
      Domain:
        DomainName: !FindInMap [EnvironmentMap, !Ref Environment, domainInternal]
        CertificateArn: !Sub
          - 'arn:aws:acm:us-east-1:${AWS::AccountId}:certificate/${Certificate}'
          - Certificate: !FindInMap [EnvironmentMap, !Ref Environment, certificateEdge]
        EndpointConfiguration: EDGE
        Route53:
          HostedZoneId: !FindInMap [EnvironmentMap, !Ref Environment, zoneId]
        BasePath:
          - /v1

  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Auth:
        Authorizers:
          CognitoAuthorizer:
            IdentitySource: $request.header.Authorization
            JwtConfiguration:
              issuer: !Sub
                - 'https://cognito-idp.us-east-1.amazonaws.com/${UserPool}'
                - UserPool: !FindInMap [EnvironmentMap, !Ref Environment, userPool]
              audience:
                - !FindInMap [EnvironmentMap, !Ref Environment, userPoolClient]
        DefaultAuthorizer: CognitoAuthorizer
      CorsConfiguration:
        AllowCredentials: true
        AllowHeaders:
          - Authorization
          - Content-Type
          - X-Amz-Date
          - X-Amz-Security-Token
          - X-Api-Key
        AllowMethods:
          - DELETE
          - GET
          - OPTIONS
          - PATCH
          - POST
          - PUT
        AllowOrigins:
          - !FindInMap [EnvironmentMap, !Ref Environment, corsDomain]
      Domain:
        BasePath:
          - /v1
        CertificateArn: !Sub
          - 'arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/${Certificate}'
          - Certificate: !FindInMap [EnvironmentMap, !Ref Environment, certificateRegional]
        DomainName: !FindInMap [EnvironmentMap, !Ref Environment, domain]
        EndpointConfiguration: REGIONAL
      FailOnWarnings: true
      StageName: v1

  # SAM won't create two Route53 records, so the HttpApi domain name is created separately
  HttpRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !Sub '${HttpApi.DomainName.RegionalDomainName}'
        HostedZoneId: !Sub '${HttpApi.DomainName.RegionalHostedZoneId}'
      HostedZoneId: !FindInMap [EnvironmentMap, !Ref Environment, zoneId]
      Name: !FindInMap [EnvironmentMap, !Ref Environment, domain]
      Type: A

  # Lambda

  ## Accounts

  DeleteAccountFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/delete-account.deleteAccountHandler
      CodeUri: './dist'
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Description: emails-email-api delete account
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref AccountTable
      Environment:
        Variables:
          DYNAMODB_ACCOUNTS_TABLE_NAME: !Ref AccountTable
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /accounts/{accountId}
            Method: delete
            Auth:
              ApiKeyRequired: true
        Http:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /accounts/{accountId}
            Method: delete
      Tags:
        'created-by': 'emails-email-api'
        'created-for': 'emails'
        'environment': !Ref Environment
      Timeout: 10
      Tracing: Active

  DeleteAccountLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: DeleteAccountFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${DeleteAccountFunction}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'emails-email-api'
        - Key: 'created-for'
          Value: 'emails'
        - Key: 'environment'
          Value: !Ref Environment

  DeleteAccountLogGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref DeleteAccountLogGroup

  GetAccountInternalFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/get-account-internal.getAccountInternalHandler
      CodeUri: './dist'
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Description: emails-email-api get account internal
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref AccountTable
      Environment:
        Variables:
          DYNAMODB_ACCOUNTS_TABLE_NAME: !Ref AccountTable
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /accounts/{accountId}/internal
            Method: get
            Auth:
              ApiKeyRequired: true
      Tags:
        'created-by': 'emails-email-api'
        'created-for': 'emails'
        'environment': !Ref Environment
      Timeout: 10
      Tracing: Active

  GetAccountInternalLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: GetAccountInternalFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetAccountInternalFunction}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'emails-email-api'
        - Key: 'created-for'
          Value: 'emails'
        - Key: 'environment'
          Value: !Ref Environment

  GetAccountInternalLogGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref GetAccountInternalLogGroup

  GetAccountFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/get-account.getAccountHandler
      CodeUri: './dist'
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Description: emails-email-api get account
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref AccountTable
      Environment:
        Variables:
          DYNAMODB_ACCOUNTS_TABLE_NAME: !Ref AccountTable
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /accounts/{accountId}
            Method: get
            Auth:
              ApiKeyRequired: true
        Http:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /accounts/{accountId}
            Method: get
      Tags:
        'created-by': 'emails-email-api'
        'created-for': 'emails'
        'environment': !Ref Environment
      Timeout: 10
      Tracing: Active

  GetAccountLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: GetAccountFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetAccountFunction}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'emails-email-api'
        - Key: 'created-for'
          Value: 'emails'
        - Key: 'environment'
          Value: !Ref Environment

  GetAccountLogGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref GetAccountLogGroup

  GetAllAccountsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/get-all-accounts.getAllAccountsHandler
      CodeUri: './dist'
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Description: emails-email-api get all accounts
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref AccountTable
      Environment:
        Variables:
          DYNAMODB_ACCOUNTS_TABLE_NAME: !Ref AccountTable
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /accounts
            Method: get
            Auth:
              ApiKeyRequired: true
      Tags:
        'created-by': 'emails-email-api'
        'created-for': 'emails'
        'environment': !Ref Environment
      Timeout: 10
      Tracing: Active

  GetAllAccountsLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: GetAllAccountsFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetAllAccountsFunction}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'emails-email-api'
        - Key: 'created-for'
          Value: 'emails'
        - Key: 'environment'
          Value: !Ref Environment

  GetAllAccountsLogGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref GetAllAccountsLogGroup

  PatchAccountFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/patch-account.patchAccountHandler
      CodeUri: './dist'
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Description: emails-email-api patch account
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref AccountTable
      Environment:
        Variables:
          DYNAMODB_ACCOUNTS_TABLE_NAME: !Ref AccountTable
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /accounts/{accountId}
            Method: patch
            Auth:
              ApiKeyRequired: true
        Http:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /accounts/{accountId}
            Method: patch
      Tags:
        'created-by': 'emails-email-api'
        'created-for': 'emails'
        'environment': !Ref Environment
      Timeout: 10
      Tracing: Active

  PatchAccountLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: PatchAccountFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${PatchAccountFunction}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'emails-email-api'
        - Key: 'created-for'
          Value: 'emails'
        - Key: 'environment'
          Value: !Ref Environment

  PatchAccountLogGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref PatchAccountLogGroup

  PutAccountFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/put-account.putAccountHandler
      CodeUri: './dist'
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Description: emails-email-api put account
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref AccountTable
      Environment:
        Variables:
          DYNAMODB_ACCOUNTS_TABLE_NAME: !Ref AccountTable
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /accounts/{accountId}
            Method: put
            Auth:
              ApiKeyRequired: true
        Http:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /accounts/{accountId}
            Method: put
      Tags:
        'created-by': 'emails-email-api'
        'created-for': 'emails'
        'environment': !Ref Environment
      Timeout: 10
      Tracing: Active

  PutAccountLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: PutAccountFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${PutAccountFunction}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'emails-email-api'
        - Key: 'created-for'
          Value: 'emails'
        - Key: 'environment'
          Value: !Ref Environment

  PutAccountLogGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref PutAccountLogGroup

  ## Received

  DeleteReceivedEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/received/delete-email.deleteEmailHandler
      CodeUri: './dist'
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Description: emails-email-api delete received email
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref ReceivedTable
        - S3CrudPolicy:
            BucketName: !FindInMap [EnvironmentMap, !Ref Environment, bucket]
      Environment:
        Variables:
          DYNAMODB_RECEIVED_TABLE_NAME: !Ref ReceivedTable
          EMAIL_BUCKET: !FindInMap [EnvironmentMap, !Ref Environment, bucket]
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /accounts/{accountId}/emails/received/{emailId}
            Method: delete
            Auth:
              ApiKeyRequired: true
        Http:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /accounts/{accountId}/emails/received/{emailId}
            Method: delete
      Tags:
        'created-by': 'emails-email-api'
        'created-for': 'emails'
        'environment': !Ref Environment
      Timeout: 20
      Tracing: Active

  DeleteReceivedEmailLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: DeleteReceivedEmailFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${DeleteReceivedEmailFunction}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'emails-email-api'
        - Key: 'created-for'
          Value: 'emails'
        - Key: 'environment'
          Value: !Ref Environment

  DeleteReceivedEmailLogGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref DeleteReceivedEmailLogGroup

  GetAllReceivedEmailsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/received/get-all-emails.getAllEmailsHandler
      CodeUri: './dist'
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Description: emails-email-api get all received emails
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref ReceivedTable
      Environment:
        Variables:
          DYNAMODB_RECEIVED_TABLE_NAME: !Ref ReceivedTable
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /accounts/{accountId}/emails/received
            Method: get
            Auth:
              ApiKeyRequired: true
        Http:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /accounts/{accountId}/emails/received
            Method: get
      Tags:
        'created-by': 'emails-email-api'
        'created-for': 'emails'
        'environment': !Ref Environment
      Timeout: 20
      Tracing: Active

  GetAllReceivedEmailsLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: GetAllReceivedEmailsFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetAllReceivedEmailsFunction}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'emails-email-api'
        - Key: 'created-for'
          Value: 'emails'
        - Key: 'environment'
          Value: !Ref Environment

  GetAllReceivedEmailsLogGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref GetAllReceivedEmailsLogGroup

  GetReceivedEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/received/get-email.getEmailHandler
      CodeUri: './dist'
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Description: emails-email-api get received email
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref ReceivedTable
      Environment:
        Variables:
          DYNAMODB_RECEIVED_TABLE_NAME: !Ref ReceivedTable
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /accounts/{accountId}/emails/received/{emailId}
            Method: get
            Auth:
              ApiKeyRequired: true
        Http:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /accounts/{accountId}/emails/received/{emailId}
            Method: get
      Tags:
        'created-by': 'emails-email-api'
        'created-for': 'emails'
        'environment': !Ref Environment
      Timeout: 10
      Tracing: Active

  GetReceivedEmailLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: GetReceivedEmailFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetReceivedEmailFunction}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'emails-email-api'
        - Key: 'created-for'
          Value: 'emails'
        - Key: 'environment'
          Value: !Ref Environment

  GetReceivedEmailLogGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref GetReceivedEmailLogGroup

  PatchReceivedEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/received/patch-email.patchEmailHandler
      CodeUri: './dist'
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Description: emails-email-api patch received email
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref ReceivedTable
      Environment:
        Variables:
          DYNAMODB_RECEIVED_TABLE_NAME: !Ref ReceivedTable
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /accounts/{accountId}/emails/received/{emailId}
            Method: patch
            Auth:
              ApiKeyRequired: true
        Http:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /accounts/{accountId}/emails/received/{emailId}
            Method: patch
      Tags:
        'created-by': 'emails-email-api'
        'created-for': 'emails'
        'environment': !Ref Environment
      Timeout: 10
      Tracing: Active

  PatchReceivedEmailLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: PatchReceivedEmailFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${PatchReceivedEmailFunction}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'emails-email-api'
        - Key: 'created-for'
          Value: 'emails'
        - Key: 'environment'
          Value: !Ref Environment

  PatchReceivedEmailLogGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref PatchReceivedEmailLogGroup

  PutReceivedEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/received/put-email.putEmailHandler
      CodeUri: './dist'
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Description: emails-email-api put received email
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref ReceivedTable
      Environment:
        Variables:
          DYNAMODB_RECEIVED_TABLE_NAME: !Ref ReceivedTable
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /accounts/{accountId}/emails/received/{emailId}
            Method: put
            Auth:
              ApiKeyRequired: true
      Tags:
        'created-by': 'emails-email-api'
        'created-for': 'emails'
        'environment': !Ref Environment
      Timeout: 30
      Tracing: Active

  PutReceivedEmailLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: PutReceivedEmailFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${PutReceivedEmailFunction}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'emails-email-api'
        - Key: 'created-for'
          Value: 'emails'
        - Key: 'environment'
          Value: !Ref Environment

  PutReceivedEmailLogGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref PutReceivedEmailLogGroup

  ## Received attachments

  GetReceivedAttachmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/received/attachments/get-attachment.getAttachmentHandler
      CodeUri: './dist'
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Description: emails-email-api get received email attachment
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref ReceivedTable
        - S3ReadPolicy:
            BucketName: !FindInMap [EnvironmentMap, !Ref Environment, bucket]
      Environment:
        Variables:
          DYNAMODB_RECEIVED_TABLE_NAME: !Ref ReceivedTable
          EMAIL_BUCKET: !FindInMap [EnvironmentMap, !Ref Environment, bucket]
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /accounts/{accountId}/emails/received/{emailId}/attachments/{attachmentId}
            Method: get
            Auth:
              ApiKeyRequired: true
        Http:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /accounts/{accountId}/emails/received/{emailId}/attachments/{attachmentId}
            Method: get
      Tags:
        'created-by': 'emails-email-api'
        'created-for': 'emails'
        'environment': !Ref Environment
      Timeout: 10
      Tracing: Active

  GetReceivedAttachmentLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: GetReceivedAttachmentFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetReceivedAttachmentFunction}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'emails-email-api'
        - Key: 'created-for'
          Value: 'emails'
        - Key: 'environment'
          Value: !Ref Environment

  GetReceivedAttachmentLogGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref GetReceivedAttachmentLogGroup

  ## Received contents

  GetReceivedContentsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/received/contents/get-contents.getContentsHandler
      CodeUri: './dist'
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Description: emails-email-api get received email contents
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref ReceivedTable
        - S3ReadPolicy:
            BucketName: !FindInMap [EnvironmentMap, !Ref Environment, bucket]
      Environment:
        Variables:
          DYNAMODB_RECEIVED_TABLE_NAME: !Ref ReceivedTable
          EMAIL_BUCKET: !FindInMap [EnvironmentMap, !Ref Environment, bucket]
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /accounts/{accountId}/emails/received/{emailId}/contents
            Method: get
            Auth:
              ApiKeyRequired: true
        Http:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /accounts/{accountId}/emails/received/{emailId}/contents
            Method: get
      Tags:
        'created-by': 'emails-email-api'
        'created-for': 'emails'
        'environment': !Ref Environment
      Timeout: 10
      Tracing: Active

  GetReceivedContentsLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: GetReceivedContentsFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetReceivedContentsFunction}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'emails-email-api'
        - Key: 'created-for'
          Value: 'emails'
        - Key: 'environment'
          Value: !Ref Environment

  GetReceivedContentsLogGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref GetReceivedContentsLogGroup

  ## Sent

  DeleteSentEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/sent/delete-email.deleteEmailHandler
      CodeUri: './dist'
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Description: emails-email-api delete sent email
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref SentTable
        - S3CrudPolicy:
            BucketName: !FindInMap [EnvironmentMap, !Ref Environment, bucket]
      Environment:
        Variables:
          DYNAMODB_SENT_TABLE_NAME: !Ref SentTable
          EMAIL_BUCKET: !FindInMap [EnvironmentMap, !Ref Environment, bucket]
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /accounts/{accountId}/emails/sent/{emailId}
            Method: delete
            Auth:
              ApiKeyRequired: true
        Http:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /accounts/{accountId}/emails/sent/{emailId}
            Method: delete
      Tags:
        'created-by': 'emails-email-api'
        'created-for': 'emails'
        'environment': !Ref Environment
      Timeout: 20
      Tracing: Active

  DeleteSentEmailLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: DeleteSentEmailFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${DeleteSentEmailFunction}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'emails-email-api'
        - Key: 'created-for'
          Value: 'emails'
        - Key: 'environment'
          Value: !Ref Environment

  DeleteSentEmailLogGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref DeleteSentEmailLogGroup

  GetAllSentEmailsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/sent/get-all-emails.getAllEmailsHandler
      CodeUri: './dist'
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Description: emails-email-api get all sent emails
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref SentTable
      Environment:
        Variables:
          DYNAMODB_SENT_TABLE_NAME: !Ref SentTable
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /accounts/{accountId}/emails/sent
            Method: get
            Auth:
              ApiKeyRequired: true
        Http:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /accounts/{accountId}/emails/sent
            Method: get
      Tags:
        'created-by': 'emails-email-api'
        'created-for': 'emails'
        'environment': !Ref Environment
      Timeout: 20
      Tracing: Active

  GetAllSentEmailsLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: GetAllSentEmailsFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetAllSentEmailsFunction}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'emails-email-api'
        - Key: 'created-for'
          Value: 'emails'
        - Key: 'environment'
          Value: !Ref Environment

  GetAllSentEmailsLogGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref GetAllSentEmailsLogGroup

  GetSentEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/sent/get-email.getEmailHandler
      CodeUri: './dist'
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Description: emails-email-api get sent email
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref SentTable
      Environment:
        Variables:
          DYNAMODB_SENT_TABLE_NAME: !Ref SentTable
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /accounts/{accountId}/emails/sent/{emailId}
            Method: get
            Auth:
              ApiKeyRequired: true
        Http:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /accounts/{accountId}/emails/sent/{emailId}
            Method: get
      Tags:
        'created-by': 'emails-email-api'
        'created-for': 'emails'
        'environment': !Ref Environment
      Timeout: 10
      Tracing: Active

  GetSentEmailLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: GetSentEmailFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetSentEmailFunction}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'emails-email-api'
        - Key: 'created-for'
          Value: 'emails'
        - Key: 'environment'
          Value: !Ref Environment

  GetSentEmailLogGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref GetSentEmailLogGroup

  PostSentEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/sent/post-email.postEmailHandler
      CodeUri: './dist'
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Description: emails-email-api post sent email
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref AccountTable
        - DynamoDBCrudPolicy:
            TableName: !Ref SentTable
        - S3CrudPolicy:
            BucketName: !FindInMap [EnvironmentMap, !Ref Environment, bucket]
      Environment:
        Variables:
          DYNAMODB_ACCOUNTS_TABLE_NAME: !Ref AccountTable
          DYNAMODB_SENT_TABLE_NAME: !Ref SentTable
          EMAIL_BUCKET: !FindInMap [EnvironmentMap, !Ref Environment, bucket]
          EMAIL_DOMAIN: !FindInMap [EnvironmentMap, !Ref Environment, domainEmail]
          QUEUE_API_KEY: !Ref QueueApiKey
          QUEUE_API_URL: !FindInMap [EnvironmentMap, !Ref Environment, queueApiUrl]
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /accounts/{accountId}/emails/sent
            Method: post
            Auth:
              ApiKeyRequired: true
        Http:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /accounts/{accountId}/emails/sent
            Method: post
      Tags:
        'created-by': 'emails-email-api'
        'created-for': 'emails'
        'environment': !Ref Environment
      Timeout: 30
      Tracing: Active

  PostSentEmailLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: PostSentEmailFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${PostSentEmailFunction}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'emails-email-api'
        - Key: 'created-for'
          Value: 'emails'
        - Key: 'environment'
          Value: !Ref Environment

  PostSentEmailLogGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref PostSentEmailLogGroup

  ## Sent attachments

  PostSentAttachmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/sent/attachments/post-attachment.postAttachmentHandler
      CodeUri: './dist'
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Description: emails-email-api post sent email attachment
      Policies:
        - AWSLambdaBasicExecutionRole
        - S3CrudPolicy:
            BucketName: !FindInMap [EnvironmentMap, !Ref Environment, bucket]
      Environment:
        Variables:
          EMAIL_BUCKET: !FindInMap [EnvironmentMap, !Ref Environment, bucket]
          MAX_UPLOAD_SIZE: 10000000 # 10MB
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /accounts/{accountId}/emails/sent/attachments
            Method: post
            Auth:
              ApiKeyRequired: true
        Http:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /accounts/{accountId}/emails/sent/attachments
            Method: post
      Tags:
        'created-by': 'emails-email-api'
        'created-for': 'emails'
        'environment': !Ref Environment
      Timeout: 10
      Tracing: Active

  PostSentAttachmentLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: PostSentAttachmentFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${PostSentAttachmentFunction}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'emails-email-api'
        - Key: 'created-for'
          Value: 'emails'
        - Key: 'environment'
          Value: !Ref Environment

  PostSentAttachmentLogGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref PostSentAttachmentLogGroup

  ## Sent contents

  GetSentContentsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/sent/contents/get-contents.getContentsHandler
      CodeUri: './dist'
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Description: emails-email-api get sent email contents
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref SentTable
        - S3ReadPolicy:
            BucketName: !FindInMap [EnvironmentMap, !Ref Environment, bucket]
      Environment:
        Variables:
          DYNAMODB_SENT_TABLE_NAME: !Ref SentTable
          EMAIL_BUCKET: !FindInMap [EnvironmentMap, !Ref Environment, bucket]
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /accounts/{accountId}/emails/sent/{emailId}/contents
            Method: get
            Auth:
              ApiKeyRequired: true
        Http:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /accounts/{accountId}/emails/sent/{emailId}/contents
            Method: get
      Tags:
        'created-by': 'emails-email-api'
        'created-for': 'emails'
        'environment': !Ref Environment
      Timeout: 10
      Tracing: Active

  GetSentContentsLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: GetSentContentsFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetSentContentsFunction}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'emails-email-api'
        - Key: 'created-for'
          Value: 'emails'
        - Key: 'environment'
          Value: !Ref Environment

  GetSentContentsLogGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref GetSentContentsLogGroup

  # Database

  AccountTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: Account
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: Account
          KeyType: HASH
      TableName: !FindInMap [EnvironmentMap, !Ref Environment, tableAccounts]
      Tags:
        - Key: 'created-by'
          Value: 'emails-email-api'
        - Key: 'created-for'
          Value: 'emails'
        - Key: 'environment'
          Value: !Ref Environment

  ReceivedTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: Account
          AttributeType: S
        - AttributeName: MessageID
          AttributeType: S
        - AttributeName: Timestamp
          AttributeType: N
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: TimestampIndex
          KeySchema:
            - AttributeName: Account
              KeyType: HASH
            - AttributeName: Timestamp
              KeyType: RANGE
          Projection:
            NonKeyAttributes:
              - MessageID
            ProjectionType: INCLUDE
      KeySchema:
        - AttributeName: Account
          KeyType: HASH
        - AttributeName: MessageID
          KeyType: RANGE
      TableName: !FindInMap [EnvironmentMap, !Ref Environment, tableReceived]
      Tags:
        - Key: 'created-by'
          Value: 'emails-email-api'
        - Key: 'created-for'
          Value: 'emails'
        - Key: 'environment'
          Value: !Ref Environment

  SentTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: Account
          AttributeType: S
        - AttributeName: MessageID
          AttributeType: S
        - AttributeName: Timestamp
          AttributeType: N
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: TimestampIndex
          KeySchema:
            - AttributeName: Account
              KeyType: HASH
            - AttributeName: Timestamp
              KeyType: RANGE
          Projection:
            NonKeyAttributes:
              - MessageID
            ProjectionType: INCLUDE
      KeySchema:
        - AttributeName: Account
          KeyType: HASH
        - AttributeName: MessageID
          KeyType: RANGE
      TableName: !FindInMap [EnvironmentMap, !Ref Environment, tableSent]
      Tags:
        - Key: 'created-by'
          Value: 'emails-email-api'
        - Key: 'created-for'
          Value: 'emails'
        - Key: 'environment'
          Value: !Ref Environment
